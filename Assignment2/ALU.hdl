// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not(in=zx, out=k);
   Or(a=zx, b=k, out=p1);
   And(a=zx, b=k, out=p0);

   Not16(in=x, out=m);
   Mux16(a=x, b=m, sel=zx, out=h);
   And16(a=x, b=h, out=ps);
   Not16(in=ps, out=psnot);
   Mux16(a=ps, b=psnot, sel=nx, out=outx);

   Not16(in=y, out=my);
   Mux16(a=y, b=my, sel=zy, out=hy);
   And16(a=y, b=hy, out=psy);
   Not16(in=psy, out=psnoty);
   Mux16(a=psy, b=psnoty, sel=ny, out=outy);

   And16(a=outx, b=outy, out=and1);
   Add16(a=outx, b=outy, out=add1);
   Mux16(a=and1, b=add1, sel=f, out=out1);

   Not16(in=out1, out=out2);
   Mux16(a=out1, b=out2, sel=no, out=gubka, out[0..7] = marcxena, out[8..15] = marjvena);

   Or8Way(in=marcxena, out=marcxzr);
   Or8Way(in=marjvena, out=marjvzr);
   Or(a=marcxzr, b=marjvzr, out=ntzr);
   Not(in=ntzr, out=zr);

   And16(a=gubka, b=gubka, out[15]=ng);

   And16(a=gubka, b=gubka, out=out);
}